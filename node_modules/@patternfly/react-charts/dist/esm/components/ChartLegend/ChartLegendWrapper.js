import _pt from "prop-types";

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import * as React from 'react';
import { ChartCommonStyles } from '../ChartTheme';
import { getLegendX, getLegendY, getTheme } from "../ChartUtils";
export let ChartLegendConfigChartType;

(function (ChartLegendConfigChartType) {
  ChartLegendConfigChartType["chart"] = "chart";
  ChartLegendConfigChartType["pie"] = "pie";
})(ChartLegendConfigChartType || (ChartLegendConfigChartType = {}));

;
/**
 * Helper to position a legend component within a component's SVG
 *
 * Example:
 *
 * <ChartLegendWrapper
 *   chartHeight={200}
 *   chartWidth={600}
 *   position="right"
 *   svgHeight={200}
 *   svgWidth={800}
 * >
 *   <ChartLegend data={[{ name: 'Cats' }, { name: 'Dogs' }]} orientation="vertical"/>
 * </ChartLegendWrapper>
 */

export const ChartLegendWrapper = ({
  chartType = 'chart',
  children,
  dx = 0,
  dy = 0,
  position = ChartCommonStyles.legend.position,
  themeColor,
  themeVariant,
  // destructure last
  theme = getTheme(themeColor, themeVariant),
  orientation = theme.legend.orientation,
  svgHeight = theme.chart.height,
  svgWidth = theme.chart.width,
  chartHeight = svgHeight,
  chartWidth = svgWidth
}) => {
  // Render children
  const renderChildren = () => React.Children.toArray(children).map(child => {
    const childProps = child.props ? child.props : {};

    if (childProps.data) {
      return React.cloneElement(child, _objectSpread({
        orientation,
        standalone: false,
        theme,
        x: getLegendX({
          chartWidth,
          dx,
          legendData: childProps.data,
          legendOrientation: childProps.legendOrientation ? childProps.legendOrientation : orientation,
          legendPosition: position,
          legendProps: childProps,
          theme,
          svgWidth
        }),
        y: getLegendY({
          chartHeight,
          chartType,
          dy,
          legendData: childProps.data,
          legendOrientation: childProps.legendOrientation ? childProps.legendOrientation : orientation,
          legendProps: childProps,
          legendPosition: position,
          theme
        })
      }, childProps));
    }

    return child;
  });

  return React.createElement(React.Fragment, null, renderChildren());
};
ChartLegendWrapper.propTypes = {
  chartHeight: _pt.number,
  chartWidth: _pt.number,
  chartType: _pt.string,
  children: _pt.node,
  dx: _pt.number,
  dy: _pt.number,
  orientation: _pt.oneOf(['horizontal', 'vertical']),
  position: _pt.oneOf(['bottom', 'bottom-left', 'right']),
  svgHeight: _pt.number,
  svgWidth: _pt.number,
  theme: _pt.any,
  themeColor: _pt.string,
  themeVariant: _pt.string
};
//# sourceMappingURL=ChartLegendWrapper.js.map