import _pt from "prop-types";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import * as React from 'react';
import { VictoryPie } from "victory";
import { Data } from 'victory-core';
import hoistNonReactStatics from 'hoist-non-react-statics';
import { ChartContainer } from '../ChartContainer';
import { ChartDonut } from '../ChartDonut';
import { ChartCommonStyles, ChartDonutStyles } from "../ChartTheme";
import { getChartOrigin, getDonutThresholdDynamicTheme, getDonutThresholdStaticTheme } from '../ChartUtils';
export let ChartDonutThresholdDonutOrientation;

(function (ChartDonutThresholdDonutOrientation) {
  ChartDonutThresholdDonutOrientation["left"] = "left";
  ChartDonutThresholdDonutOrientation["right"] = "right";
  ChartDonutThresholdDonutOrientation["top"] = "top";
})(ChartDonutThresholdDonutOrientation || (ChartDonutThresholdDonutOrientation = {}));

;
export let ChartDonutThresholdLabelOrientation;

(function (ChartDonutThresholdLabelOrientation) {
  ChartDonutThresholdLabelOrientation["horizontal"] = "horizontal";
  ChartDonutThresholdLabelOrientation["vertical"] = "vertical";
})(ChartDonutThresholdLabelOrientation || (ChartDonutThresholdLabelOrientation = {}));

;
export let ChartDonutThresholdLabelPosition;

(function (ChartDonutThresholdLabelPosition) {
  ChartDonutThresholdLabelPosition["centroid"] = "centroid";
  ChartDonutThresholdLabelPosition["endAngle"] = "endAngle";
  ChartDonutThresholdLabelPosition["startAngle"] = "startAngle";
})(ChartDonutThresholdLabelPosition || (ChartDonutThresholdLabelPosition = {}));

;
export let ChartDonutThresholdLegendPosition;

(function (ChartDonutThresholdLegendPosition) {
  ChartDonutThresholdLegendPosition["bottom"] = "bottom";
  ChartDonutThresholdLegendPosition["right"] = "right";
})(ChartDonutThresholdLegendPosition || (ChartDonutThresholdLegendPosition = {}));

;
export let ChartDonutThresholdSortOrder;

(function (ChartDonutThresholdSortOrder) {
  ChartDonutThresholdSortOrder["ascending"] = "ascending";
  ChartDonutThresholdSortOrder["descending"] = "descending";
})(ChartDonutThresholdSortOrder || (ChartDonutThresholdSortOrder = {}));

;
export let ChartDonutThresholdSubTitlePosition;
/**
 * See https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/victory/index.d.ts
 */

(function (ChartDonutThresholdSubTitlePosition) {
  ChartDonutThresholdSubTitlePosition["bottom"] = "bottom";
  ChartDonutThresholdSubTitlePosition["center"] = "center";
  ChartDonutThresholdSubTitlePosition["right"] = "right";
})(ChartDonutThresholdSubTitlePosition || (ChartDonutThresholdSubTitlePosition = {}));

export const ChartDonutThreshold = (_ref) => {
  let {
    ariaDesc,
    ariaTitle,
    children,
    data = [],
    invert = false,
    labels = [],
    // Don't show any tooltip labels by default, let consumer override if needed
    legendComponent,
    legendData,
    legendPosition = ChartCommonStyles.legend.position,
    standalone = true,
    subTitlePosition = ChartDonutStyles.label.subTitlePosition,
    themeColor,
    themeVariant,
    x,
    y,
    // destructure last
    theme = getDonutThresholdStaticTheme(themeColor, themeVariant, invert),
    height = theme.pie.height,
    width = theme.pie.width,
    donutHeight = Math.min(height, width),
    donutWidth = Math.min(height, width)
  } = _ref,
      rest = _objectWithoutProperties(_ref, ["ariaDesc", "ariaTitle", "children", "data", "invert", "labels", "legendComponent", "legendData", "legendPosition", "standalone", "subTitlePosition", "themeColor", "themeVariant", "x", "y", "theme", "height", "width", "donutHeight", "donutWidth"]);

  const donutSize = Math.min(donutHeight, donutWidth); // Returns computed data representing pie chart slices

  const getComputedData = () => {
    // Format and sort data. Sorting ensures thresholds are displayed in the correct order and simplifies calculations.
    const datum = Data.formatData(data, _objectSpread({
      x,
      y
    }, rest), ['x', 'y']).sort((a, b) => a._y - b._y); // Data must be offset so that the sum of all data point y-values (including the final slice) == 100.

    const [prev, computedData] = datum.reduce((acc, dataPoint) => {
      return [dataPoint._y, // Set the previous value to current y value
      [...acc[1], {
        x: dataPoint._x,
        // Conditionally add x property only if it is in the original data object
        y: dataPoint._y - acc[0] // Must be offset by previous value

      }]];
    }, [0, []]);
    return [...computedData, {
      y: prev ? 100 - prev : 0
    }];
  }; // Returns the horizontal shift for the donut utilization chart


  const getDonutDx = (dynamicTheme, legendPosition) => {
    const dynamicWidth = donutSize - (theme.pie.width - dynamicTheme.pie.width);

    switch (legendPosition) {
      case 'right':
        return Math.round((donutSize - dynamicWidth) / 2);

      default:
        return 0;
    }
  }; // Returns the vertical shift for the donut utilization chart


  const getDonutDy = dynamicTheme => {
    const dynamicHeight = donutSize - (theme.pie.height - dynamicTheme.pie.height);
    return Math.round((donutSize - dynamicHeight) / 2);
  }; // Returns the horizontal shift for the donut utilization legend


  const getLegendDx = (dynamicTheme, position) => {
    const dynamicWidth = donutSize - (theme.pie.width - dynamicTheme.pie.width);

    switch (position) {
      case 'right':
        return getDonutDx(dynamicTheme, legendPosition) + Math.round((donutSize - dynamicWidth) / 2);

      default:
        return 0;
    }
  }; // Returns the vertical shift for the donut utilization legend


  const getLegendDy = (dynamicTheme, position) => {
    const dynamicWidth = donutSize - (theme.pie.width - dynamicTheme.pie.width);

    switch (position) {
      case 'bottom':
        return getDonutDy(dynamicTheme) + Math.round((donutSize - dynamicWidth) / 2);

      default:
        return getDonutDy(dynamicTheme);
    }
  }; // Returns the horizontal shift for the donut utilization subtitle


  const getSubTitleDx = (dynamicTheme, position) => {
    const dynamicWidth = donutSize - (theme.pie.width - dynamicTheme.pie.width);

    switch (position) {
      case 'right':
        return getDonutDx(dynamicTheme, legendPosition) + Math.round((donutSize - dynamicWidth) / 2);

      default:
        return Math.round((donutSize - dynamicWidth) / 2);
    }
  }; // Returns the vertical shift for the donut utilization subtitle


  const getSubTitleDy = (dynamicTheme, position) => {
    return getLegendDy(dynamicTheme, position);
  }; // Render dynamic utilization donut cart


  const renderChildren = () => React.Children.toArray(children).map(child => {
    if (child.props) {
      const _child$props = child.props,
            {
        data: childData
      } = _child$props,
            childProps = _objectWithoutProperties(_child$props, ["data"]);

      const datum = Data.formatData([childData], childProps, ['x', 'y']); // Format child data independently of this component's props

      const dynamicTheme = childProps.theme || getDonutThresholdDynamicTheme(childProps.themeColor || themeColor, childProps.themeVariant || themeVariant);
      const legendPos = childProps.legendPosition || legendPosition;
      const subTitlePos = childProps.subTitlePosition || subTitlePosition;
      const donutSizeDiff = theme.pie.height - dynamicTheme.pie.height; // static - dynamic chart heights

      const childDountSize = donutSize > donutSizeDiff ? donutSize - donutSizeDiff : 0; // not visible < 50px

      return React.cloneElement(child, _objectSpread({
        data: childData,
        donutDx: getDonutDx(dynamicTheme, legendPos),
        donutDy: getDonutDy(dynamicTheme),
        donutHeight: childDountSize,
        donutWidth: childDountSize,
        endAngle: 360 * (datum[0]._y ? datum[0]._y / 100 : 0),
        height,
        invert,
        legendDx: getLegendDx(dynamicTheme, legendPos),
        legendDy: getLegendDy(dynamicTheme, legendPos),
        legendPosition: legendPos,
        showStatic: false,
        standalone: false,
        subTitleDx: getSubTitleDx(dynamicTheme, subTitlePos),
        subTitleDy: getSubTitleDy(dynamicTheme, subTitlePos),
        subTitlePosition: subTitlePos,
        theme: dynamicTheme,
        width
      }, childProps));
    }

    return child;
  }); // Static threshold dount chart


  const chart = React.createElement(ChartDonut, _extends({
    data: getComputedData(),
    height: donutSize,
    labels: labels,
    origin: getChartOrigin({
      chartHeight: donutSize,
      chartWidth: donutSize,
      legendPosition,
      svgWidth: width
    }),
    standalone: false,
    theme: theme,
    width: donutSize
  }, rest));
  return standalone ? React.createElement(ChartContainer, {
    desc: ariaDesc,
    height: height,
    title: ariaTitle,
    width: width
  }, chart, renderChildren()) : React.createElement(React.Fragment, null, chart, renderChildren());
}; // Note: VictoryPie.role must be hoisted

ChartDonutThreshold.propTypes = {
  ' ': _pt.any,
  animate: _pt.any,
  ariaDesc: _pt.string,
  ariaTitle: _pt.string,
  categories: _pt.any,
  children: _pt.element,
  colorScale: _pt.any,
  containerComponent: _pt.element,
  cornerRadius: _pt.number,
  data: _pt.arrayOf(_pt.any),
  dataComponent: _pt.element,
  desc: _pt.string,
  donutHeight: _pt.number,
  donutWidth: _pt.number,
  endAngle: _pt.number,
  eventKey: _pt.any,
  events: _pt.arrayOf(_pt.any),
  externalEventMutations: _pt.arrayOf(_pt.any),
  groupComponent: _pt.element,
  height: _pt.number,
  innerRadius: _pt.number,
  invert: _pt.bool,
  labelRadius: _pt.number,
  labels: _pt.oneOfType([_pt.arrayOf(_pt.string), _pt.func]),
  legendPosition: _pt.oneOf(['bottom', 'right'])
};
hoistNonReactStatics(ChartDonutThreshold, VictoryPie);
//# sourceMappingURL=ChartDonutThreshold.js.map