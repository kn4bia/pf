import _pt from "prop-types";

function _extends() { _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; }; return _extends.apply(this, arguments); }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

import * as React from 'react';
import hoistNonReactStatics from 'hoist-non-react-statics';
import { VictoryPie } from 'victory';
import { getDonutTheme } from '../ChartUtils/chart-theme';
import { ChartContainer } from '../ChartContainer';
import { ChartLabel } from '../ChartLabel';
import { ChartPie } from '../ChartPie';
import { ChartCommonStyles, ChartDonutStyles } from '../ChartTheme';
import { getLabelX, getLabelY } from '../ChartUtils';
export let ChartDonutLabelPosition;

(function (ChartDonutLabelPosition) {
  ChartDonutLabelPosition["centroid"] = "centroid";
  ChartDonutLabelPosition["endAngle"] = "endAngle";
  ChartDonutLabelPosition["startAngle"] = "startAngle";
})(ChartDonutLabelPosition || (ChartDonutLabelPosition = {}));

;
export let ChartDonutSortOrder;

(function (ChartDonutSortOrder) {
  ChartDonutSortOrder["ascending"] = "ascending";
  ChartDonutSortOrder["descending"] = "descending";
})(ChartDonutSortOrder || (ChartDonutSortOrder = {}));

;
export let ChartDonutSubTitlePosition;
/**
 * See https://github.com/DefinitelyTyped/DefinitelyTyped/blob/master/types/victory/index.d.ts
 */

(function (ChartDonutSubTitlePosition) {
  ChartDonutSubTitlePosition["bottom"] = "bottom";
  ChartDonutSubTitlePosition["center"] = "center";
  ChartDonutSubTitlePosition["right"] = "right";
})(ChartDonutSubTitlePosition || (ChartDonutSubTitlePosition = {}));

export const ChartDonut = (_ref) => {
  let {
    ariaDesc,
    ariaTitle,
    donutDx = 0,
    donutDy = 0,
    legendPosition = ChartCommonStyles.legend.position,
    standalone = true,
    subTitle,
    subTitleComponent = React.createElement(ChartLabel, null),
    subTitleDx = 0,
    subTitleDy = 0,
    subTitlePosition = ChartDonutStyles.label.subTitlePosition,
    themeColor,
    themeVariant,
    title,
    titleComponent = React.createElement(ChartLabel, null),
    // destructure last
    theme = getDonutTheme(themeColor, themeVariant),
    capHeight = 1.1,
    height = theme.pie.height,
    width = theme.pie.width,
    donutHeight = Math.min(height, width),
    donutWidth = Math.min(height, width),
    innerRadius = (Math.min(donutHeight, donutWidth) - 34) / 2
  } = _ref,
      rest = _objectWithoutProperties(_ref, ["ariaDesc", "ariaTitle", "donutDx", "donutDy", "legendPosition", "standalone", "subTitle", "subTitleComponent", "subTitleDx", "subTitleDy", "subTitlePosition", "themeColor", "themeVariant", "title", "titleComponent", "theme", "capHeight", "height", "width", "donutHeight", "donutWidth", "innerRadius"]);

  const donutSize = Math.min(donutHeight, donutWidth); // Returns subtitle

  const getSubTitle = () => {
    if (!subTitle || subTitlePosition === ChartDonutSubTitlePosition.center) {
      return null;
    }

    const subTitleProps = subTitleComponent.props ? subTitleComponent.props : {};
    return React.cloneElement(subTitleComponent, _objectSpread({
      style: ChartDonutStyles.label.subTitle,
      text: subTitle,
      textAnchor: subTitlePosition === 'right' ? 'start' : 'middle',
      verticalAnchor: 'middle',
      x: getLabelX({
        chartWidth: donutSize,
        dx: subTitleDx,
        labelPosition: subTitlePosition,
        legendPosition,
        svgWidth: width
      }),
      y: getLabelY({
        chartHeight: donutSize,
        dy: subTitleDy,
        labelPosition: subTitlePosition
      })
    }, subTitleProps));
  }; // Returns title


  const getTitle = () => {
    if (!title) {
      return null;
    }

    const titleProps = titleComponent ? titleComponent.props : {};
    const showBoth = title && subTitle && subTitlePosition == ChartDonutSubTitlePosition.center;
    return React.cloneElement(titleComponent, _objectSpread({}, showBoth && {
      capHeight
    }, {
      style: [ChartDonutStyles.label.title, ChartDonutStyles.label.subTitle],
      text: showBoth ? [title, subTitle] : title,
      textAnchor: 'middle',
      verticalAnchor: 'middle',
      x: getLabelX({
        chartWidth: donutSize,
        dx: donutDx,
        labelPosition: 'center',
        legendPosition,
        svgWidth: width
      }),
      y: getLabelY({
        chartHeight: donutSize,
        dy: donutDy,
        labelPosition: 'center'
      })
    }, titleProps));
  };

  const chart = React.createElement(ChartPie, _extends({
    height: height,
    innerRadius: innerRadius > 0 ? innerRadius : 0,
    legendPosition: legendPosition,
    pieDx: donutDx,
    pieDy: donutDy,
    pieHeight: donutSize,
    pieWidth: donutSize,
    standalone: false,
    theme: theme,
    width: width
  }, rest));
  return standalone ? React.createElement(ChartContainer, {
    desc: ariaDesc,
    height: height,
    title: ariaTitle,
    width: width
  }, chart, getTitle(), getSubTitle()) : React.createElement(React.Fragment, null, chart, getTitle(), getSubTitle());
}; // Note: VictoryPie.role must be hoisted

ChartDonut.propTypes = {
  ' ': _pt.any,
  animate: _pt.any,
  ariaDesc: _pt.string,
  ariaTitle: _pt.string,
  capHeight: _pt.any,
  categories: _pt.any,
  colorScale: _pt.any,
  containerComponent: _pt.element,
  cornerRadius: _pt.number,
  data: _pt.arrayOf(_pt.any),
  dataComponent: _pt.element,
  donutHeight: _pt.number,
  donutDx: _pt.number,
  donutDy: _pt.number,
  donutWidth: _pt.number,
  endAngle: _pt.number,
  eventKey: _pt.any,
  events: _pt.arrayOf(_pt.any),
  externalEventMutations: _pt.arrayOf(_pt.any),
  groupComponent: _pt.element,
  height: _pt.number,
  innerRadius: _pt.number,
  labelComponent: _pt.element,
  labelPosition: _pt.oneOf(['startAngle', 'endAngle', 'centroid']),
  labelRadius: _pt.number
};
hoistNonReactStatics(ChartDonut, VictoryPie);
//# sourceMappingURL=ChartDonut.js.map