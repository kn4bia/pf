(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "../ChartTheme"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("../ChartTheme"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.ChartTheme);
    global.undefined = mod.exports;
  }
})(this, function (exports, _ChartTheme) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.getLabelY = exports.getLabelX = undefined;

  // Returns x coordinate for label
  const getLabelX = exports.getLabelX = ({
    chartWidth,
    dx = 0,
    labelPosition,
    legendPosition,
    svgWidth
  }) => {
    if (!chartWidth) {
      return 0;
    }

    switch (labelPosition) {
      case 'center':
        switch (legendPosition) {
          case 'bottom':
            return Math.round(svgWidth / 2) + dx;

          default:
            return Math.round(chartWidth / 2) + dx;
        }

      case 'bottom':
        return Math.round(chartWidth / 2) + dx;

      case 'right':
        switch (legendPosition) {
          case 'bottom':
            return Math.round(svgWidth / 2) + Math.round(chartWidth / 2) + _ChartTheme.ChartCommonStyles.label.margin + dx;

          case 'right':
            return chartWidth + _ChartTheme.ChartCommonStyles.label.margin + dx;

          default:
            return dx;
        }

      default:
        return dx;
    }
  }; // Returns y coordinate for label


  const getLabelY = exports.getLabelY = ({
    chartHeight,
    dy = 0,
    labelPosition
  }) => {
    if (!chartHeight) {
      return 0;
    }

    switch (labelPosition) {
      case 'center':
        return Math.round(chartHeight / 2) + dy;

      case 'bottom':
        return chartHeight + _ChartTheme.ChartCommonStyles.label.margin + dy;

      case 'right':
        return Math.round(chartHeight / 2) + dy;

      default:
        return dy;
    }
  };
});
//# sourceMappingURL=chart-label.js.map