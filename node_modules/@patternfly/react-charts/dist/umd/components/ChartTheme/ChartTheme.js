(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "./themes/axis-theme", "./themes/base-theme", "./themes/donut-theme", "./themes/donut-threshold-theme", "./themes/donut-utilization-theme"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("./themes/axis-theme"), require("./themes/base-theme"), require("./themes/donut-theme"), require("./themes/donut-threshold-theme"), require("./themes/donut-utilization-theme"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.axisTheme, global.baseTheme, global.donutTheme, global.donutThresholdTheme, global.donutUtilizationTheme);
    global.undefined = mod.exports;
  }
})(this, function (exports, _axisTheme, _baseTheme, _donutTheme, _donutThresholdTheme, _donutUtilizationTheme) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ChartDonutThresholdStaticTheme = exports.ChartDonutThresholdDynamicTheme = exports.ChartDonutTheme = exports.ChartDonutUtilizationStaticTheme = exports.ChartDonutUtilizationDynamicTheme = exports.ChartBaseTheme = exports.ChartAxisTheme = exports.ChartThemeVariant = exports.ChartThemeColor = undefined;

  /**
   * The multiOrdered theme is intended for ordered charts; donut, pie, bar, & stack
   * The multiUnordered theme is intended for unordered charts; area & line
   *
   * Note: multi defaults to multiOrdered
   */
  const ChartThemeColor = exports.ChartThemeColor = {
    blue: 'blue',
    cyan: 'cyan',
    default: 'blue',
    gold: 'gold',
    gray: 'gray',
    green: 'green',
    multi: 'multi',
    multiOrdered: 'multi-ordered',
    multiUnordered: 'multi-unordered',
    orange: 'orange',
    purple: 'purple'
  };
  const ChartThemeVariant = exports.ChartThemeVariant = {
    dark: 'dark',
    default: 'light',
    light: 'light'
  };
  const ChartAxisTheme = exports.ChartAxisTheme = _axisTheme.AxisTheme;
  const ChartBaseTheme = exports.ChartBaseTheme = _baseTheme.BaseTheme;
  const ChartDonutUtilizationDynamicTheme = exports.ChartDonutUtilizationDynamicTheme = _donutUtilizationTheme.DonutUtilizationDynamicTheme;
  const ChartDonutUtilizationStaticTheme = exports.ChartDonutUtilizationStaticTheme = _donutUtilizationTheme.DonutUtilizationStaticTheme;
  const ChartDonutTheme = exports.ChartDonutTheme = _donutTheme.DonutTheme;
  const ChartDonutThresholdDynamicTheme = exports.ChartDonutThresholdDynamicTheme = _donutThresholdTheme.DonutThresholdDynamicTheme;
  const ChartDonutThresholdStaticTheme = exports.ChartDonutThresholdStaticTheme = _donutThresholdTheme.DonutThresholdStaticTheme;
});
//# sourceMappingURL=ChartTheme.js.map