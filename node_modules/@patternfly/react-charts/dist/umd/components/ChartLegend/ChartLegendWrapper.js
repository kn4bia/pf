(function (global, factory) {
  if (typeof define === "function" && define.amd) {
    define(["exports", "prop-types", "react", "../ChartTheme", "../ChartUtils"], factory);
  } else if (typeof exports !== "undefined") {
    factory(exports, require("prop-types"), require("react"), require("../ChartTheme"), require("../ChartUtils"));
  } else {
    var mod = {
      exports: {}
    };
    factory(mod.exports, global.propTypes, global.react, global.ChartTheme, global.ChartUtils);
    global.undefined = mod.exports;
  }
})(this, function (exports, _propTypes, _react, _ChartTheme, _ChartUtils) {
  "use strict";

  Object.defineProperty(exports, "__esModule", {
    value: true
  });
  exports.ChartLegendWrapper = exports.ChartLegendConfigChartType = undefined;

  var _propTypes2 = _interopRequireDefault(_propTypes);

  var React = _interopRequireWildcard(_react);

  function _interopRequireWildcard(obj) {
    if (obj && obj.__esModule) {
      return obj;
    } else {
      var newObj = {};

      if (obj != null) {
        for (var key in obj) {
          if (Object.prototype.hasOwnProperty.call(obj, key)) {
            var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {};

            if (desc.get || desc.set) {
              Object.defineProperty(newObj, key, desc);
            } else {
              newObj[key] = obj[key];
            }
          }
        }
      }

      newObj.default = obj;
      return newObj;
    }
  }

  function _interopRequireDefault(obj) {
    return obj && obj.__esModule ? obj : {
      default: obj
    };
  }

  function _objectSpread(target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i] != null ? arguments[i] : {};
      var ownKeys = Object.keys(source);

      if (typeof Object.getOwnPropertySymbols === 'function') {
        ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) {
          return Object.getOwnPropertyDescriptor(source, sym).enumerable;
        }));
      }

      ownKeys.forEach(function (key) {
        _defineProperty(target, key, source[key]);
      });
    }

    return target;
  }

  function _defineProperty(obj, key, value) {
    if (key in obj) {
      Object.defineProperty(obj, key, {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    } else {
      obj[key] = value;
    }

    return obj;
  }

  let ChartLegendConfigChartType = exports.ChartLegendConfigChartType = undefined;

  (function (ChartLegendConfigChartType) {
    ChartLegendConfigChartType["chart"] = "chart";
    ChartLegendConfigChartType["pie"] = "pie";
  })(ChartLegendConfigChartType || (exports.ChartLegendConfigChartType = ChartLegendConfigChartType = {}));

  ;
  /**
   * Helper to position a legend component within a component's SVG
   *
   * Example:
   *
   * <ChartLegendWrapper
   *   chartHeight={200}
   *   chartWidth={600}
   *   position="right"
   *   svgHeight={200}
   *   svgWidth={800}
   * >
   *   <ChartLegend data={[{ name: 'Cats' }, { name: 'Dogs' }]} orientation="vertical"/>
   * </ChartLegendWrapper>
   */

  const ChartLegendWrapper = exports.ChartLegendWrapper = ({
    chartType = 'chart',
    children,
    dx = 0,
    dy = 0,
    position = _ChartTheme.ChartCommonStyles.legend.position,
    themeColor,
    themeVariant,
    // destructure last
    theme = (0, _ChartUtils.getTheme)(themeColor, themeVariant),
    orientation = theme.legend.orientation,
    svgHeight = theme.chart.height,
    svgWidth = theme.chart.width,
    chartHeight = svgHeight,
    chartWidth = svgWidth
  }) => {
    // Render children
    const renderChildren = () => React.Children.toArray(children).map(child => {
      const childProps = child.props ? child.props : {};

      if (childProps.data) {
        return React.cloneElement(child, _objectSpread({
          orientation,
          standalone: false,
          theme,
          x: (0, _ChartUtils.getLegendX)({
            chartWidth,
            dx,
            legendData: childProps.data,
            legendOrientation: childProps.legendOrientation ? childProps.legendOrientation : orientation,
            legendPosition: position,
            legendProps: childProps,
            theme,
            svgWidth
          }),
          y: (0, _ChartUtils.getLegendY)({
            chartHeight,
            chartType,
            dy,
            legendData: childProps.data,
            legendOrientation: childProps.legendOrientation ? childProps.legendOrientation : orientation,
            legendProps: childProps,
            legendPosition: position,
            theme
          })
        }, childProps));
      }

      return child;
    });

    return React.createElement(React.Fragment, null, renderChildren());
  };

  ChartLegendWrapper.propTypes = {
    chartHeight: _propTypes2.default.number,
    chartWidth: _propTypes2.default.number,
    chartType: _propTypes2.default.string,
    children: _propTypes2.default.node,
    dx: _propTypes2.default.number,
    dy: _propTypes2.default.number,
    orientation: _propTypes2.default.oneOf(['horizontal', 'vertical']),
    position: _propTypes2.default.oneOf(['bottom', 'bottom-left', 'right']),
    svgHeight: _propTypes2.default.number,
    svgWidth: _propTypes2.default.number,
    theme: _propTypes2.default.any,
    themeColor: _propTypes2.default.string,
    themeVariant: _propTypes2.default.string
  };
});
//# sourceMappingURL=ChartLegendWrapper.js.map