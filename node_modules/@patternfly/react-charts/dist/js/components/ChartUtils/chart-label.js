"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getLabelY = exports.getLabelX = void 0;

var _ChartTheme = require("../ChartTheme");

// Returns x coordinate for label
var getLabelX = function getLabelX(_ref) {
  var chartWidth = _ref.chartWidth,
      _ref$dx = _ref.dx,
      dx = _ref$dx === void 0 ? 0 : _ref$dx,
      labelPosition = _ref.labelPosition,
      legendPosition = _ref.legendPosition,
      svgWidth = _ref.svgWidth;

  if (!chartWidth) {
    return 0;
  }

  switch (labelPosition) {
    case 'center':
      switch (legendPosition) {
        case 'bottom':
          return Math.round(svgWidth / 2) + dx;

        default:
          return Math.round(chartWidth / 2) + dx;
      }

    case 'bottom':
      return Math.round(chartWidth / 2) + dx;

    case 'right':
      switch (legendPosition) {
        case 'bottom':
          return Math.round(svgWidth / 2) + Math.round(chartWidth / 2) + _ChartTheme.ChartCommonStyles.label.margin + dx;

        case 'right':
          return chartWidth + _ChartTheme.ChartCommonStyles.label.margin + dx;

        default:
          return dx;
      }

    default:
      return dx;
  }
}; // Returns y coordinate for label


exports.getLabelX = getLabelX;

var getLabelY = function getLabelY(_ref2) {
  var chartHeight = _ref2.chartHeight,
      _ref2$dy = _ref2.dy,
      dy = _ref2$dy === void 0 ? 0 : _ref2$dy,
      labelPosition = _ref2.labelPosition;

  if (!chartHeight) {
    return 0;
  }

  switch (labelPosition) {
    case 'center':
      return Math.round(chartHeight / 2) + dy;

    case 'bottom':
      return chartHeight + _ChartTheme.ChartCommonStyles.label.margin + dy;

    case 'right':
      return Math.round(chartHeight / 2) + dy;

    default:
      return dy;
  }
};

exports.getLabelY = getLabelY;
//# sourceMappingURL=chart-label.js.map