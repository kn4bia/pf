"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ChartLegendWrapper = exports.ChartLegendConfigChartType = void 0;

var _propTypes = _interopRequireDefault(require("prop-types"));

var React = _interopRequireWildcard(require("react"));

var _ChartTheme = require("../ChartTheme");

var _ChartUtils = require("../ChartUtils");

function _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) { var desc = Object.defineProperty && Object.getOwnPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : {}; if (desc.get || desc.set) { Object.defineProperty(newObj, key, desc); } else { newObj[key] = obj[key]; } } } } newObj["default"] = obj; return newObj; } }

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; var ownKeys = Object.keys(source); if (typeof Object.getOwnPropertySymbols === 'function') { ownKeys = ownKeys.concat(Object.getOwnPropertySymbols(source).filter(function (sym) { return Object.getOwnPropertyDescriptor(source, sym).enumerable; })); } ownKeys.forEach(function (key) { _defineProperty(target, key, source[key]); }); } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

var ChartLegendConfigChartType;
exports.ChartLegendConfigChartType = ChartLegendConfigChartType;

(function (ChartLegendConfigChartType) {
  ChartLegendConfigChartType["chart"] = "chart";
  ChartLegendConfigChartType["pie"] = "pie";
})(ChartLegendConfigChartType || (exports.ChartLegendConfigChartType = ChartLegendConfigChartType = {}));

;
/**
 * Helper to position a legend component within a component's SVG
 *
 * Example:
 *
 * <ChartLegendWrapper
 *   chartHeight={200}
 *   chartWidth={600}
 *   position="right"
 *   svgHeight={200}
 *   svgWidth={800}
 * >
 *   <ChartLegend data={[{ name: 'Cats' }, { name: 'Dogs' }]} orientation="vertical"/>
 * </ChartLegendWrapper>
 */

var ChartLegendWrapper = function ChartLegendWrapper(_ref) {
  var _ref$chartType = _ref.chartType,
      chartType = _ref$chartType === void 0 ? 'chart' : _ref$chartType,
      children = _ref.children,
      _ref$dx = _ref.dx,
      dx = _ref$dx === void 0 ? 0 : _ref$dx,
      _ref$dy = _ref.dy,
      dy = _ref$dy === void 0 ? 0 : _ref$dy,
      _ref$position = _ref.position,
      position = _ref$position === void 0 ? _ChartTheme.ChartCommonStyles.legend.position : _ref$position,
      themeColor = _ref.themeColor,
      themeVariant = _ref.themeVariant,
      _ref$theme = _ref.theme,
      theme = _ref$theme === void 0 ? (0, _ChartUtils.getTheme)(themeColor, themeVariant) : _ref$theme,
      _ref$orientation = _ref.orientation,
      orientation = _ref$orientation === void 0 ? theme.legend.orientation : _ref$orientation,
      _ref$svgHeight = _ref.svgHeight,
      svgHeight = _ref$svgHeight === void 0 ? theme.chart.height : _ref$svgHeight,
      _ref$svgWidth = _ref.svgWidth,
      svgWidth = _ref$svgWidth === void 0 ? theme.chart.width : _ref$svgWidth,
      _ref$chartHeight = _ref.chartHeight,
      chartHeight = _ref$chartHeight === void 0 ? svgHeight : _ref$chartHeight,
      _ref$chartWidth = _ref.chartWidth,
      chartWidth = _ref$chartWidth === void 0 ? svgWidth : _ref$chartWidth;

  // Render children
  var renderChildren = function renderChildren() {
    return React.Children.toArray(children).map(function (child) {
      var childProps = child.props ? child.props : {};

      if (childProps.data) {
        return React.cloneElement(child, _objectSpread({
          orientation: orientation,
          standalone: false,
          theme: theme,
          x: (0, _ChartUtils.getLegendX)({
            chartWidth: chartWidth,
            dx: dx,
            legendData: childProps.data,
            legendOrientation: childProps.legendOrientation ? childProps.legendOrientation : orientation,
            legendPosition: position,
            legendProps: childProps,
            theme: theme,
            svgWidth: svgWidth
          }),
          y: (0, _ChartUtils.getLegendY)({
            chartHeight: chartHeight,
            chartType: chartType,
            dy: dy,
            legendData: childProps.data,
            legendOrientation: childProps.legendOrientation ? childProps.legendOrientation : orientation,
            legendProps: childProps,
            legendPosition: position,
            theme: theme
          })
        }, childProps));
      }

      return child;
    });
  };

  return React.createElement(React.Fragment, null, renderChildren());
};

exports.ChartLegendWrapper = ChartLegendWrapper;
ChartLegendWrapper.propTypes = {
  chartHeight: _propTypes["default"].number,
  chartWidth: _propTypes["default"].number,
  chartType: _propTypes["default"].string,
  children: _propTypes["default"].node,
  dx: _propTypes["default"].number,
  dy: _propTypes["default"].number,
  orientation: _propTypes["default"].oneOf(['horizontal', 'vertical']),
  position: _propTypes["default"].oneOf(['bottom', 'bottom-left', 'right']),
  svgHeight: _propTypes["default"].number,
  svgWidth: _propTypes["default"].number,
  theme: _propTypes["default"].any,
  themeColor: _propTypes["default"].string,
  themeVariant: _propTypes["default"].string
};
//# sourceMappingURL=ChartLegendWrapper.js.map